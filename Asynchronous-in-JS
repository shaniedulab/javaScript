/****************************************************************
 * Synchronous in javascript   
 ****************************************************************/

//javaScript is a single threaded programming language. that means there is only one thread which executes all the JavaScript code.
//Because of this js engine can process only one statement ata time

//in synchronous programming, code is executed line by line in the order od its execution
//if any part of the code is taking long time in its execution (due to long running opertaion ,such as network access ), then next statement 
//will have  to wait for its execution to complete.

//most of the code which we write in js is synchronous code.


/****************************************************************
 * Asynchronous in javascript   
 ****************************************************************/
//. in Asynchronous programm, we can execute a piece of code asynchronously in the background. an asynchronous code does not block the execution of
//next line of codes.

//there are many functions amd webApi provided by browsers webapi, which gets executed asynchronously in the background without blocking the
//execution. one such function is setTimeout() function.

//1. Asynchronous code is non-blocking.
//2. It does not stop the execution of main code.

// let str='Good Morning';
// console.log(str);
// setTimeout(()=>{
//     alert('this is an alert window!');
// },5000)
// console.log('have a good day');

/****************************************************************
 * AJAX & XNLHttpRequest Object in javascript   
 ****************************************************************/

//AJAX stands for Asynchronous JavaScript and XML.
//AJAX isnota promming language, but it is a set of existing web technologies.
//AJAX helps in feaching data Asynchronous from a remote web server.

// console.log(arr);
// arr[0]=9
// console.log(arr);

// function fun(){
//     const result = [{name:'sasa',age:21},{name:'sdfs',age:45}];
//     console.log(result);
//     result[0].lname=222
//     console.log(result);
// }

// fun()


/****************************************************************
 * What is a callback Hell in javascript   
 ****************************************************************/

//Callback Hell, also known as Pyramid od Dhoom is ananti pattern seen in code of asynchronous programming.

//1. Makes the code look messy
//2. code is less maintainable and less readable.
//3. more prone to bugs.

/****************************************************************
 * Promises in javascript   
 ****************************************************************/

//a promise is a special JS object which is used as a placeholder for the future for the future result of an asynchronous operation.

//a JS promise, promises a result.

// every promise has an executer function that gets executed immediately when we create a promise.

//initially when the promise is created, it is in panding state. the data returned by the promise in pending state is undefined.

//the state of the promise changes to settled when the promise is either resolved or rejected.

//if the promise is resolved, then it returns the resolved data. otherwise it returns the rejected data (i.e some error message).



// let promise=new Promise((resolved,rejected)=>{
//     console.log("executer function executed");
//     // resolved([20,40,60,880])
//     // rejected("something went wrong")
// });

// console.log(promise);

//producing code.
// let promise=new Promise((resolved,rejected)=>{
//     let xhr=new XMLHttpRequest();
//     xhr.open('GET','data1.txt',true);
//     xhr.send();
//     xhr.onload = function(){
//         if(xhr.statusText==='OK'){
//             resolved(xhr.responseText)
//         }else{
//             rejected('Something went wrong')
//         }
//     }
// });

//consuming code.

// console.log(promise);
// promise.then((data)=>{
//     console.log(data);
// }).catch((err)=>{
//     console.log(err);
// })

// promise.then((data)=>{
//     console.log(data);
// },(err)=>{
//     console.log(err);
// })


/****************************************************************
 * What is featch APi in javascript   
 ****************************************************************/

//the featch API is a modern interface that allows you to make http requests to servers from web browsers.
//the featch API returns the requested data asa promise, and we can use then and catch method on the promise to handle the data.

//public API
//REST Countries
// https://restcountries.com/

//the featch API

// function getCountry(country){
//     console.log(country);
//     let promise1=fetch('https://restcountries.com/v3.1/name/'+ country)
//     promise2=promise1.then((response)=>{
//         console.log(response);
//         //json method returns a promise
//         return response.json();
//     })
//     promise2.then((data)=>{
//         console.log(data);
//     })
// }

// getCountry('usa');
// console.log("aslkdja");

//if the promise is resolved
//1. the then method attached to that promise will be called
//2. top the callback function of then method promise will pass the resolved data.
//3. callback fun of the then method is executed.


//remote webserver
//chain of then method 
//catch method


/****************************************************************
 * Avoiding callback hell with promises in javascript   
 ****************************************************************/

//to avoid callback hell with promises in javascript use chain of then method.

// function getCountry(){
//     fetch('https://restcountries.com/v3.1/name/usa')
//     .then((response)=>{
//         return response.json();
//     })
//     .then((data)=>{
//         console.log(data);
//         return fetch('https://restcountries.com/v3.1/name/brazil')
//     })
//     .then((response)=>{
//         return response.json();
//     })
//     .then((data)=>{
//         console.log(data);
//         // return fetch('https://restcountries.com/v3.1/name/usa')
//     })
//     .catch((error)=>{
//         console.log(error);
//     })
// }

// getCountry()


/****************************************************************
 * Handling Rejected Promises in javascript   
 ****************************************************************/

// function getCountry(){
//     fetch('https://restcountries.com/v3.1/name/usa')
//     .then((response)=>{
//         return response.json();
//     })
//     .then((data)=>{
//         console.log(data);
//         return fetch('https://restcountries.com/v3.1/name/brazil')
//     })
//     .then((response)=>{
//         return response.json();
//     })
//     .then((data)=>{
//         console.log(data);
//         return fetch('https://restcountries.com/v3.1/name/usa')
//     })
//     .then((response)=>{
//         return response.json();
//     })
//     .then((data)=>{
//         console.log(data);
//         // return fetch('https://restcountries.com/v3.1/name/usa')
//     })
//     .catch((error)=>{
//         // alert(error);
//         console.log(error.message);
//     })
//     .finally(()=>{
//         console.log('finally blocked is always executed');
        
//     })
// }

// getCountry()

// document.getElementById('btn-load')
// .addEventListener('click',()=>{
//     getCountry()
// })



/****************************************************************
 * Throwing Errors Manually in javascript   
 ****************************************************************/

// function getCountry(){
//     fetch('https://restcountries.com/v3.1/name/abc')
//     .then((response)=>{
//         if(!response.ok){
//             throw new Error(`Country not found (${response.status})`);
//         }
//         return response.json();
//     })
//     .then((data)=>{
//         console.log(data);
//         return fetch('https://restcountries.com/v3.1/name/brazil')
//     })
//     .then((response)=>{
//         return response.json();
//     })
//     .then((data)=>{
//         console.log(data);
//         return fetch('https://restcountries.com/v3.1/name/usa')
//     })
//     .then((response)=>{
//         return response.json();
//     })
//     .then((data)=>{
//         console.log(data);
//         // return fetch('https://restcountries.com/v3.1/name/usa')
//     })
//     .catch((error)=>{
//         alert(error.message);
//         // console.log(error.message);
//     })
//     .finally(()=>{
//         console.log('finally blocked is always executed');
//     })
// }

// // getCountry()

// document.getElementById('btn-load')
// .addEventListener('click',()=>{
//     getCountry()
// })


/****************************************************************
 * Asynchronous Code Execution & event Loop in javascript   
 ****************************************************************/

//web Api -> Dom  Timer  featch  console.log
//JS Engine -> Heap and Call Stack

//MicroTask queue -> promise

//CallBack queue ->

//event loop ->

/****************************************************************
 * Callback queue VS Microtask queue in javascript   
 ****************************************************************/
// // console.log(Math.floor(Math.random()*1000000))
// console.log(Math.random()*10)



// //6 digit random number generator without random function

// function randomNumber(){
//     let random = [1,2,3,4,5,6,7,8,9,10]
    
   
// }

// randomNumber();

// console.log(Math.random())

/*********************************************************************************
//Callback queue VS Mincrotask queue.
**********************************************************************************/
// A callback function associated with an asynchronous code  waits for its execution inside either a callback queue or microtask queue.

//Most of the callback functions associated with an asynchronous code, have to wait for their execution in the callback queue
//But there are some callback functions for example, the callback function associated with the promise
//waits for the execution in the microtask queue.

//the callback function inthe microtask queue, takes pririty over the callback function in the callback queue i.e,
//the callback function in microtask queue get executed first.

// console.log("Program start here");

// setTimeout(()=>{
// console.log('setTimeout executed');
// },0);

// Promise.resolve('resolve').then((response)=>{
//     console.log(response);
//     for(var i=0; i<1000000000; i++){
        
//     }
// })
// console.log("Program end here");


/*********************************************************************************
//Promisifying Geolocation Api.
**********************************************************************************/

//Geolocation Api gets the current cordinates of a user.
// navigator.geolocation.getCurrentPosition(
//     position=>console.log(position),
//     err=>console.log(err)
// )

// let getPosition=function(){
//     return new Promise(function(resolve,reject){
//         navigator.geolocation.getCurrentPosition(resolve,reject);
//     })
// }

// getPosition().then((pos)=>{
//     // console.log(pos);
//     let {latitude:lat,longitude:lng} = pos.coords;
//     console.log(lat,lng);
// }).catch((err)=>{
//     console.log(err.message);
// })

//geocode.xyz Api.


/*********************************************************************************
//Async & await in Javascript.
**********************************************************************************/
//ES2017.
//async- expects a function asynchronously & returns a promise.
//await- waits for a promise to be settled.
//always use together

// let getCountryinfo= async function(){
//     let response=await fetch('https://restcountries.com/v3.1/name/usa')
//     let data=await response.json();
//     console.log(data);
// }

// getCountryinfo();


// let getPosition=function(){
//     return new Promise(function(resolve,reject){
//         navigator.geolocation.getCurrentPosition(resolve,reject);
//     })
// }

// let displayUserCountry=async function(){
//     let position = await getPosition();
//     let {latitude:lat,longitude:lng} = position.coords;
//     console.log(lat,lng);
//     let geoResponse= await fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`);
//     console.log(geoResponse);
//     let geodata=await geoResponse.json();
//     console.log("geodata",geodata);
//     let countryResponse=await fetch(`https://restcountries.com/v3.1/name/${geodata.country}`);
//     console.log(countryResponse);
    
// }

// displayUserCountry()

/*********************************************************************************
//Error handling with try & catch.
**********************************************************************************/
//syntex
// try{

// }catch(err){

// }

/*********************************************************************************
//Returning a value from async function
**********************************************************************************/

// (async function(){
//     try{
        // let data=await function();
        // console.log(data);
//     }catch(err){
//         console.log(err);
//     }
// })()


/*********************************************************************************
//Running promises in parallel.
**********************************************************************************/
// console.log("jhgjkhgjhg");
// let getData= function(url,error='Something went wrong'){
//     return fetch(url).then(res=>{
//         if(!res.ok){
//             throw new Error(`${error} ${res.status}`)
//         }
//         return res.json();
//     })
// }
// let getcountryInfo=async function(){
//     // let usa=await getData('https://restcountries.com/v3.1/name/usa')
//     // let [brazil]=await getData('https://restcountries.com/v3.1/name/brazil')
//     // let [germany]=await getData('https://restcountries.com/v3.1/name/germany')
//     let data=await Promise.all([getData('https://restcountries.com/v3.1/name/usa'),getData('https://restcountries.com/v3.1/name/brazil'),getData('https://restcountries.com/v3.1/name/germany')])
//     console.log(data);
//     // console.log(brazil.name,usa.capital);
//     // console.log(germany.name,germany.capital);
// }

// getcountryInfo()

//takes an array of promises.
//returns anarray of resolved promise data if ll the promise passed to all method is resolved.
//return the first reject promise data

/*********************************************************************************
//Promises Combinators: race, allSettled ,any.
**********************************************************************************/
//race
//returns the data of first settell promise.
// let getData= function(url,error='Something went wrong'){
//     return fetch(url).then(res=>{
//         if(!res.ok){
//             throw new Error(`${error} ${res.status}`)
//         }
//         return res.json();
//     })
// }
// let getcountryInfo=async function(){
//     let data=await Promise.race([getData('https://restcountries.com/v3.1/name/usa'),getData('https://restcountries.com/v3.1/name/brazil'),getData('https://restcountries.com/v3.1/name/germany')])
//     console.log(data);
// }

// getcountryInfo()


//promise.allSetteled
//return an array of all the settled promises. ES2020.
// Promise.allSettled([
//     Promise.resolve('data 1'),
//     Promise.reject('data 2'),
//     Promise.resolve('data 3')
// ]).then((data)=>{
//     console.log(data);
// }).catch(err=>console.log(err))

// Promise.all([
//     Promise.resolve('data 1'),
//     Promise.reject('data 2'),
//     Promise.resolve('data 3')
// ]).then((data)=>{
//     console.log(data);
// }).catch(err=>console.log(err))


//Promise.any =ES2021
//1. takes array of promises.
//2.Returns the first resolved promise data.

// Promise.any([
//     Promise.reject('data 1'),
//     Promise.resolve('data 2'),
//     Promise.resolve('data 3')
// ]).then((data)=>{
//     console.log(data);
// }).catch(err=>console.log(err))
